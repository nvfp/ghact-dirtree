inputs:
  dir:
    description: the folder path (can be relative to root (starts with '.'), or an absolute path)
    required: false
    default: "."  # for example: '.' means at the root. './foo' means the 'root/foo/' directory
  level:
    description: "Starts from 0. A value of 0 means to list only the ones inside the given `dir`. Don't specify to mean infinite (showing all)."
    required: false
    default: null

runs:
  using: composite
  steps:      
    - run: |
        import os

        import math, re  # borrowed from  https://github.com/nvfp/mykit/blob/main/mykit/standalone/fmt_byte/__init__.py  @ jan 6, 2024
        def _connum(num):
            res = re.match(r'^(?P<sign>\+|-)?[0]*(?P<int>\d+)(?:(?P<dec>\.\d*?)[0]*)?$', str(num))
            if res is None:
                raise ValueError(f'Invalid numeric input: {repr(num)}.')
            sign, int, dec = res.groups()
            if sign in (None, '+'):
                out = ''
            else:
                if (int == '0') and (dec in (None, '.')):
                    out = ''
                else:
                    out = '-'
            out += int
            if dec not in (None, '.'):
                out += dec
            return out
        def fmt_byte(bytes:int, /, precision:int=2, gap:int=1) -> str:
            GAP = ' '*gap
            if bytes == 0: return '0' + GAP + 'B'
            bytes = round(bytes)
            sign = ''
            if bytes < 0:
                bytes = abs(bytes)
                sign = '-'
            power = math.floor( math.log(bytes, 1024) )
            number = round( bytes / math.pow(1024, power), precision )
            UNIT = [
                'B', 'KiB', 'MiB',
                'GiB', 'TiB', 'PiB',
                'EiB', 'ZiB', 'YiB',
            ]
            return sign + _connum(number) + GAP + UNIT[power]

        # DIR = os.path.abspath(os.path.join(os.getcwd(), os.path.normpath(os.environ['IPT_DIR'])))
        ## vvvvvvv updated
        IPT__dir = os.environ['IPT__dir']
        if IPT__dir.startswith('.'):
            # DIR = os.path.abspath(os.path.join(os.getcwd(), os.path.normpath(os.environ['IPT_DIR'])))
            ## vvvvv bugfixed
            # DIR = os.path.abspath(os.path.join(os.getcwd(), os.path.normpath(IPT__dir)))
            ## vvvvv improved
            DIR = os.path.normpath(os.path.abspath( os.path.join(os.getcwd(), IPT__dir) ))
        else:
            if not os.path.isdir(IPT__dir): raise AssertionError(f"Not a dir: {repr(IPT__dir)}")
            DIR = IPT__dir
        print(f"INFO: repr(DIR): {repr(DIR)}")

        ## level
        IPT__level = os.environ['IPT__level']
        if IPT__level == '':
            # level = None
            ## vvvv cant use the above because will clash with below var names
            the_level = None
        else:
            the_level = max(0, int(IPT__level))  # clamp too


        sizes = {}

        def collect_sizes(dir):
          # this_dir_size = 0
          # for i in os.listdir(dir):
          #   ipth = os.path.join(dir, i)
          #   if os.path.isfile(ipth):
          #     sizes[ipth] = os.path.getsize(ipth)
          #     this_dir_size += os.path.getsize(ipth)
          #   else: collect_sizes(ipth)
          # sizes[dir] = this_dir_size
          ## vvvvv bug fixed: forgot to bring the inner dir size to the outer (recursively)
          this_dir_size = 0
          for i in os.listdir(dir):
            ipth = os.path.join(dir, i)
            if os.path.isfile(ipth):
              sizes[ipth] = os.path.getsize(ipth)
              this_dir_size += os.path.getsize(ipth)
            else: this_dir_size += collect_sizes(ipth)
          sizes[dir] = this_dir_size
          return this_dir_size  # pass this dir size into the outer (if any)
        collect_sizes(DIR)

        def format_it(size):
          return f" {'─'*37} {size}|{fmt_byte(size)}"
        
        def run(dir, level=0):  # `level` start from 0; level=0 is the root
          if level is None: print(('' if level==0 else '    '*(level-1)+'└── ') + os.path.basename(dir) + '/' + format_it(sizes[dir]))
          else:
            if level > the_level: pass
            else: print(('' if level==0 else '    '*(level-1)+'└── ') + os.path.basename(dir) + '/' + format_it(sizes[dir]))
          for i in sorted(os.listdir(dir)):
            ipth = os.path.join(dir, i)
            if os.path.isfile(ipth):
              # print('    '*level + f'└── {i}' + format_it(sizes[ipth]))
              ## vvvvvv updated 2.0
              if level is None: print('    '*level + f'└── {i}' + format_it(sizes[ipth]))
              else:
                if level > the_level: pass
                else: print('    '*level + f'└── {i}' + format_it(sizes[ipth]))
            else: run(ipth, level+1)
        run(DIR)
      shell: python
      env:
        IPT__dir: ${{ inputs.dir }}
        IPT__level: ${{ inputs.dir }}
